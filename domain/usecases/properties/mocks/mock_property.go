// Code generated by MockGen. DO NOT EDIT.
// Source: ./create_property.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	model "lahaus/domain/model"
	properties "lahaus/domain/usecases/properties"
	reflect "reflect"
)

// MockStorageManager is a mock of StorageManager interface
type MockStorageManager struct {
	ctrl     *gomock.Controller
	recorder *MockStorageManagerMockRecorder
}

// MockStorageManagerMockRecorder is the mock recorder for MockStorageManager
type MockStorageManagerMockRecorder struct {
	mock *MockStorageManager
}

// NewMockStorageManager creates a new mock instance
func NewMockStorageManager(ctrl *gomock.Controller) *MockStorageManager {
	mock := &MockStorageManager{ctrl: ctrl}
	mock.recorder = &MockStorageManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorageManager) EXPECT() *MockStorageManagerMockRecorder {
	return m.recorder
}

// SaveProperty mocks base method
func (m *MockStorageManager) SaveProperty(property *model.Property) (*model.Property, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveProperty", property)
	ret0, _ := ret[0].(*model.Property)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveProperty indicates an expected call of SaveProperty
func (mr *MockStorageManagerMockRecorder) SaveProperty(property interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveProperty", reflect.TypeOf((*MockStorageManager)(nil).SaveProperty), property)
}

// UpdateProperty mocks base method
func (m *MockStorageManager) UpdateProperty(property *model.Property) (*model.Property, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProperty", property)
	ret0, _ := ret[0].(*model.Property)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProperty indicates an expected call of UpdateProperty
func (mr *MockStorageManagerMockRecorder) UpdateProperty(property interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProperty", reflect.TypeOf((*MockStorageManager)(nil).UpdateProperty), property)
}

// FilterProperties mocks base method
func (m *MockStorageManager) FilterProperties(search properties.PropertySearchParams) (*model.PropertiesPaging, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterProperties", search)
	ret0, _ := ret[0].(*model.PropertiesPaging)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterProperties indicates an expected call of FilterProperties
func (mr *MockStorageManagerMockRecorder) FilterProperties(search interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterProperties", reflect.TypeOf((*MockStorageManager)(nil).FilterProperties), search)
}

// MockPropertyRuler is a mock of PropertyRuler interface
type MockPropertyRuler struct {
	ctrl     *gomock.Controller
	recorder *MockPropertyRulerMockRecorder
}

// MockPropertyRulerMockRecorder is the mock recorder for MockPropertyRuler
type MockPropertyRulerMockRecorder struct {
	mock *MockPropertyRuler
}

// NewMockPropertyRuler creates a new mock instance
func NewMockPropertyRuler(ctrl *gomock.Controller) *MockPropertyRuler {
	mock := &MockPropertyRuler{ctrl: ctrl}
	mock.recorder = &MockPropertyRulerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPropertyRuler) EXPECT() *MockPropertyRulerMockRecorder {
	return m.recorder
}

// Execute mocks base method
func (m *MockPropertyRuler) Execute(property *model.Property) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Execute", property)
}

// Execute indicates an expected call of Execute
func (mr *MockPropertyRulerMockRecorder) Execute(property interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockPropertyRuler)(nil).Execute), property)
}
